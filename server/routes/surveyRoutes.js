const _ = require("lodash");
const Path = require("path-parser");
const { URL } = require("url");
const mongoose = require("mongoose"); // requiring Mongoose to access Mongoose model classes
const requireLogin = require("../middlewares/requireLogin.js"); // to make sure user is logged in
const requireCredits = require("../middlewares/requireCredits.js"); // to make sure that user has enough credits

// Importing mailer and email templates
const Mailer = require("../services/mailer.js");
const template = require("../services/templates/template.js");

const Survey = mongoose.model("surveys");

module.exports = app => {
  // redirect user to new route with new message after feedback is submitted
  app.get("/api/surveys/thanks", (req, res) => {
    res.send("Thanks for the feedback!");
  });

  // getting feedback from SendGrid via webhooks
  app.post("/api/surveys/webhooks", (req, res) => {
    // const events = _.map(req.body, (event) => {
    //   const pathname = new URL(event.url).pathname; // retrieves path of URL that has been clicked
    //   const pathHelper = new Path("/api/surveys/:surveyId/:choice"); // extracts survey ID and choice (ie. yes/no)
    //   const match = pathHelper.test(pathname);
    //   if (match) {
    //     return { email: event.email, surveyId: match.surveyId, choice: match.choice };
    //   };
    // });

    // refactoring with Lodash chain helper
    const pathHelper = new Path("/api/surveys/:surveyId/:choice"); // extracts survey ID and choice (ie. yes/no)

    const uniqueEvents = _.chain(req.body)
      .map((event) => {
        const match = pathHelper.test(new URL(event.url).pathname);
        if (match) {
          return { email: event.email, surveyId: match.surveyId, choice: match.choice };
        };
      })
    .compact() // "compact" - takes an array and removes any elements within the array that is undefined
    .uniqBy("email", "surveyId") // "uniqBy" - removes duplicates in the "email" and "surveyId" properties
    .value();

    console.log(uniqueEvents);
  });

  app.post("/api/surveys", requireLogin, requireCredits, async (req, res) => {
    const { title, subject, body, recipients } = req.body;
    const survey = new Survey({
      title, // ES2016 - title: title
      subject,
      body,
      recipients: recipients.split(",").map(email => ({ email: email.trim() })), // email is now an array of objects instead of an array of strings
      _user: req.user.id, // autogenerated by Mongoose in MongoDB
      dateSent: Date.now()
    });

    // send email after survey has been created
    const mailer = new Mailer(survey, template(survey));

    try { // try block: catches any requests and sends back a response
      await mailer.send();
      await survey.save();
      req.user.credits -= 1; // deduct credits after email has been sent
      const user = await req.user.save();
      res.send(user); // send back user model with updated number of credits
    } catch (error) {
      res.status(422).send(error); // error 422: user request is incorrect
    };
  });
};
